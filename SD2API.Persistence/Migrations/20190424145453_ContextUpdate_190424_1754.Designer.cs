// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SD2API.Persistence;

namespace SD2API.Persistence.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20190424145453_ContextUpdate_190424_1754")]
    partial class ContextUpdate_190424_1754
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SD2API.Domain.Replay", b =>
                {
                    b.Property<int>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BinaryUrl")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ReplayHashStub")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("ReplayRawFooter")
                        .HasMaxLength(2048);

                    b.Property<string>("ReplayRawHeader")
                        .HasMaxLength(4096);

                    b.HasKey("ReplayId");

                    b.ToTable("Replays");
                });

            modelBuilder.Entity("SD2API.Domain.ReplayFooter", b =>
                {
                    b.Property<int>("ReplayFooterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReplayId");

                    b.HasKey("ReplayFooterId");

                    b.HasIndex("ReplayId")
                        .IsUnique();

                    b.ToTable("ReplayFooter");
                });

            modelBuilder.Entity("SD2API.Domain.ReplayFooter+ReplayFooterResult", b =>
                {
                    b.Property<int>("ReplayFooterResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Duration")
                        .HasMaxLength(10);

                    b.Property<int>("ReplayFooterId");

                    b.Property<string>("Score")
                        .HasMaxLength(10);

                    b.Property<string>("Victory")
                        .HasMaxLength(10);

                    b.HasKey("ReplayFooterResultId");

                    b.HasIndex("ReplayFooterId")
                        .IsUnique();

                    b.ToTable("ReplayFooterResult");
                });

            modelBuilder.Entity("SD2API.Domain.ReplayHeader", b =>
                {
                    b.Property<int>("ReplayHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReplayId");

                    b.HasKey("ReplayHeaderId");

                    b.HasIndex("ReplayId")
                        .IsUnique();

                    b.ToTable("ReplayHeader");
                });

            modelBuilder.Entity("SD2API.Domain.ReplayHeader+ReplayHeaderGame", b =>
                {
                    b.Property<int>("ReplayHeaderGameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowObservers");

                    b.Property<string>("GameMode");

                    b.Property<string>("GameType");

                    b.Property<string>("IncomeRate");

                    b.Property<string>("InitMoney");

                    b.Property<string>("InverseSpawnPoints");

                    b.Property<string>("IsNetworkMode");

                    b.Property<string>("Map");

                    b.Property<string>("MapSelection");

                    b.Property<string>("ModList");

                    b.Property<string>("NbIA");

                    b.Property<string>("NbMaxPlayer");

                    b.Property<string>("Private");

                    b.Property<int>("ReplayHeaderId");

                    b.Property<string>("ScoreLimit");

                    b.Property<string>("Seed");

                    b.Property<string>("ServerName");

                    b.Property<string>("TimeLimit");

                    b.Property<string>("UniqueSessionId");

                    b.Property<string>("Version");

                    b.Property<string>("VictoryCond");

                    b.HasKey("ReplayHeaderGameId");

                    b.HasIndex("ReplayHeaderId")
                        .IsUnique();

                    b.ToTable("ReplayHeaderGame");
                });

            modelBuilder.Entity("SD2API.Domain.ReplayHeader+ReplayHeaderPlayer", b =>
                {
                    b.Property<int>("ReplayHeaderPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlayerAlliance");

                    b.Property<string>("PlayerAvatar");

                    b.Property<string>("PlayerDeckContent");

                    b.Property<string>("PlayerElo");

                    b.Property<string>("PlayerIALevel");

                    b.Property<string>("PlayerIncomeRate");

                    b.Property<string>("PlayerIsEnteredInLobby");

                    b.Property<string>("PlayerLevel");

                    b.Property<string>("PlayerModList");

                    b.Property<string>("PlayerName");

                    b.Property<string>("PlayerRank");

                    b.Property<string>("PlayerReady");

                    b.Property<string>("PlayerScoreLimit");

                    b.Property<string>("PlayerSkinIndexUsed");

                    b.Property<string>("PlayerTeamName");

                    b.Property<string>("PlayerUserId");

                    b.Property<int>("ReplayHeaderId");

                    b.HasKey("ReplayHeaderPlayerId");

                    b.HasIndex("ReplayHeaderId");

                    b.ToTable("ReplayHeaderPlayer");
                });

            modelBuilder.Entity("SD2API.Domain.ReplayFooter", b =>
                {
                    b.HasOne("SD2API.Domain.Replay", "Replay")
                        .WithOne("ReplayFooter")
                        .HasForeignKey("SD2API.Domain.ReplayFooter", "ReplayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SD2API.Domain.ReplayFooter+ReplayFooterResult", b =>
                {
                    b.HasOne("SD2API.Domain.ReplayFooter", "ReplayFooter")
                        .WithOne("result")
                        .HasForeignKey("SD2API.Domain.ReplayFooter+ReplayFooterResult", "ReplayFooterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SD2API.Domain.ReplayHeader", b =>
                {
                    b.HasOne("SD2API.Domain.Replay", "Replay")
                        .WithOne("ReplayHeader")
                        .HasForeignKey("SD2API.Domain.ReplayHeader", "ReplayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SD2API.Domain.ReplayHeader+ReplayHeaderGame", b =>
                {
                    b.HasOne("SD2API.Domain.ReplayHeader", "ReplayHeader")
                        .WithOne("Game")
                        .HasForeignKey("SD2API.Domain.ReplayHeader+ReplayHeaderGame", "ReplayHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SD2API.Domain.ReplayHeader+ReplayHeaderPlayer", b =>
                {
                    b.HasOne("SD2API.Domain.ReplayHeader", "ReplayHeader")
                        .WithMany("Players")
                        .HasForeignKey("ReplayHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
